from urllib2 import urlopen
import smtplib
from email.mime.text import MIMEText
import logins

# Google Sheets API
import httplib2
import os
from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage

try:
  import argparse
  flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()
except ImportError:
  flags = None

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SCOPES = 'https://www.googleapis.com/auth/spreadsheets.readonly'
CLIENT_SECRET_FILE = logins.sheet_client
APPLICATION_NAME = 'Comittee Emailer'
EMAIL_SUBJECT = "HACKxSUTD: Lets Meet!"
def get_credentials():
  """Gets valid user credentials from storage.

  If nothing has been stored, or if the stored credentials are invalid,
  the OAuth2 flow is completed to obtain the new credentials.

  Returns:
      Credentials, the obtained credential.
  """

  home_dir = os.environ['HOME'] 
  credential_dir = os.path.join(home_dir, '.credentials')
  print credential_dir
  if not os.path.exists(credential_dir):
      os.makedirs(credential_dir)
  credential_path = os.path.join(credential_dir,'comittee.json')
  store = Storage(credential_path)
  credentials = store.get()
  if not credentials or credentials.invalid:
      flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
      flow.user_agent = APPLICATION_NAME
      if flags:
          credentials = tools.run_flow(flow, store, flags)
      else: # Needed only for compatibility with Python 2.6
          credentials = tools.run(flow, store)
      print('Storing credentials to ' + credential_path)
  return credentials
# 1 is name , 2 is for emails, 3 for roles, 6 for dates
def get_sheet_info():
  credentials = get_credentials()
  http = credentials.authorize(httplib2.Http())
  discoveryUrl = ('https://sheets.googleapis.com/$discovery/rest?'
                  'version=v4')
  service = discovery.build('sheets', 'v4', http=http,
                            discoveryServiceUrl=discoveryUrl)

  spreadsheetId = logins.spreadsheet
  rangeName = 'A4:H25'
  result = service.spreadsheets().values().get(
      spreadsheetId=spreadsheetId, range=rangeName).execute()
  values = result.get('values', [])
  if not values:
      print('No data found.')
  else:
      return values

def format_message(name,time_slot):
  message = ["Hello "+name+",\n",
  "Thank you for signing up to be part of organizing such a momentuous event!\n",
  "We shall be having kopi/tea with ya at your selected time of: \n", time_slot,", Canteen.", 
  "\nSee you there!\n", "\nCheers,\n", "Kai Wei",
  "\n\n *This note was generated by a script, do not reply to this email. For any queries, please email kaiwei_koh@mymail.sutd.edu.sg or call me at ",
  logins.phone
  ]
  formatted=""
  for x in message:
    formatted+=x
  return formatted


def send_email(row):
  message = format_message(row[1],row[7])
  msg = MIMEText(message)
  msg['Subject'] = EMAIL_SUBJECT
  msg['To'] = row[2]
  msg['From'] = "no-reply@theweiofkai.com"
  msg['CC'] = "kaiwei_koh@mymail.sutd.edu.sg"
  mail = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
  mail.starttls()
  mail.login(logins.gmail, logins.gmail_password)
  mail.sendmail(logins.gmail, row[2]+","+msg['CC'], msg.as_string())
  print msg
  mail.quit()


def main():
  row_data = get_sheet_info()
  for x in row_data:
    send_email(x)
main()